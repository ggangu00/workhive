<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="egovframework.com.department.mapper.DepartmentMapper">

	<!-- 부서 전체조회 -->
   	<select id="departmentSelectAll" resultType="departmentDTO">
		SELECT
		   LEVEL, <!-- 트리내에서 어떤 단계에 있는지 나타내는 값 --> 
		   dept_cd,
		   dept_nm,
		   description,
		   manager,
		   depth,
		   parent_cd,
		   seq
		FROM
		   department
		WHERE 
		   UPPER(del_yn) = UPPER('n')
		START WITH <!-- 최상위 루트노드 지정 -->
		   parent_cd IS NULL  <!-- 최상위 루트노드의 부모는 NULL임 -->
		<!-- CONNECT BY : 부모와 자식 노드를 찾아서 연결, PRIOR : 자식노드쪽에 붙여서 작성 -->
		CONNECT BY PRIOR 
		   TO_NUMBER(dept_cd) = TO_NUMBER(parent_cd)
		ORDER SIBLINGS BY <!-- 형제 노드간의 정렬 -->
		   seq ASC, <!-- 정렬 기준 -->
		   TO_NUMBER(dept_cd) DESC
   	</select>
   	
   	<!-- 부서 단건조회 -->
   	<select id="departmentSelect" resultType="departmentDTO" parameterType="int">
		SELECT
		   dept_cd,
		   depth,
		   parent_cd,
		   seq,
		   dept_nm,
		   description,
		   manager,
		   del_yn
		FROM 
		   department
		WHERE
		   del_yn = UPPER('n')
		AND
		   dept_cd = #{deptCd}
   	</select>
	
	<!-- 부서 등록 -->
	<insert id="departmentInsert" parameterType="DepartmentDTO">
		INSERT INTO
		   department(
		      dept_cd,
		      depth,
		      parent_cd,
		      seq,
		      dept_nm,
		      description,
		      manager,
		      create_id
		   )
		VALUES (
		   seq_dept_cd.NEXTVAL,
		   #{depth},
		   #{parentCd},
		   #{seq},
		   #{deptNm},
		   #{description},
		   #{manager},
		   #{createId}
		)
	</insert>
	
	<!-- 부서 수정 -->
	<update id="departmentUpdate" parameterType="DepartmentDTO">
		UPDATE 
		   department
		SET 
		   depth = #{depth},
		   parent_cd = #{parentCd},
		   seq = #{seq},
		   dept_nm = #{deptNm},
		   description = #{description},
		   manager = #{manager},
		   update_dt = SYSDATE,
		   update_id = #{updateId}
		WHERE
		   dept_cd = #{deptCd}
	</update>
	
	<!-- 부서 다중 삭제 -->
	<delete id="departmentDelete" parameterType="java.util.List">
		UPDATE
		   department
		SET
		   del_yn = UPPER('Y')
		WHERE
		   dept_cd IN
		<foreach collection="list" item="deptCdList" separator="," open="(" close=")">
	        #{deptCdList}
	    </foreach>
	</delete>
	
	<!-- 부서 등록 할 때 같은 계층의 마지막 순서 가져오기 -->
	<select id="getMaxSeq" resultType="int">
		SELECT
		   NVL(MAX(seq)), 1) AS seq
		FROM
		   department
		WHERE
		   parent_cd = #{parentCd}
		AND 
		   depth = #{depth}
	</select>
	
	<!-- 부서 트리 조회 : 사용자의 부서 기준 관련 부서 검색 -->
	<select id="deptTreeSelectAll" parameterType="String" resultType="departmentDTO">
	    SELECT
		   LEVEL, <!-- 트리내에서 어떤 단계에 있는지 나타내는 값 --> 
		   dept_cd,
		   dept_nm,
		   description,
		   manager,
		   depth,
		   parent_cd,
		   seq,
		   create_id,
		   create_dt,
		   update_id,
		   update_dt,
		   del_yn
		FROM
		   department
		WHERE 
		   UPPER(del_yn) = UPPER('n')
		START WITH <!-- 최상위 루트노드 지정 -->
    		dept_cd = fn_get_top_dept(#{deptCd})
		<!-- CONNECT BY : 부모와 자식 노드를 찾아서 연결, PRIOR : 자식노드쪽에 붙여서 작성 -->
		CONNECT BY PRIOR 
		   TO_NUMBER(dept_cd) = TO_NUMBER(parent_cd)
		ORDER SIBLINGS BY <!-- 형제 노드간의 정렬 -->
		   seq ASC <!-- 정렬 기준 -->
	</select>



	
</mapper>