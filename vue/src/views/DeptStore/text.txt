<부서 업무함 메뉴 - 트리 구조>
[ app.vue 중심 ]
<template>
  <div class="sidebar">
    <ul>
      <TreeNode
        v-for="dept in rootDepartments"
        :key="dept.deptCd"
        :dept="dept"
        :departments="departments"
        :jobBoxes="jobBoxes"
      />
    </ul>
  </div>
</template>

<script setup>
import { computed } from 'vue';
import TreeNode from './TreeNode.vue';

// 부서 데이터
const departments = [
  { deptCd: 1, depth: 1, parentCd: null, deptNm: "경영지원" },
  { deptCd: 2, depth: 2, parentCd: 1, deptNm: "인사팀" },
  { deptCd: 3, depth: 2, parentCd: 1, deptNm: "재무팀" },
  { deptCd: 4, depth: 1, parentCd: null, deptNm: "영업부" },
  { deptCd: 5, depth: 2, parentCd: 4, deptNm: "국내영업팀" },
  { deptCd: 6, depth: 2, parentCd: 4, deptNm: "해외영업팀" },
];

// 업무함 데이터
const jobBoxes = [
  { jobBxCd: 1, deptCd: 1, jobBxNm: "경영 기획 업무" },
  { jobBxCd: 2, deptCd: 2, jobBxNm: "채용 업무" },
  { jobBxCd: 3, deptCd: 3, jobBxNm: "회계 업무" },
  { jobBxCd: 4, deptCd: 5, jobBxNm: "국내 마케팅" },
  { jobBxCd: 5, deptCd: 6, jobBxNm: "해외 마케팅" },
];

// 최상위 부서 찾기 (parentCd가 null인 부서)
const rootDepartments = computed(() =>
  departments.filter(dept => dept.parentCd === null)
);
</script>

<style scoped>
.sidebar {
  width: 250px;
  background: #f8f9fa;
  padding: 10px;
  border-right: 1px solid #ddd;
}
ul {
  list-style: none;
  padding-left: 15px;
}
li {
  margin: 5px 0;
}
</style>



[ 트리노드 중심 ]
<template>
  <li>
    <span>{{ dept.deptNm }}</span>
    <ul v-if="children.length || deptJobBoxes.length">
      <TreeNode
        v-for="child in children"
        :key="child.deptCd"
        :dept="child"
        :departments="departments"
        :jobBoxes="jobBoxes"
      />
      <li v-for="job in deptJobBoxes" :key="job.jobBxCd">
        📁 {{ job.jobBxNm }}
      </li>
    </ul>
  </li>
</template>

<script setup>
import { computed } from 'vue';

const props = defineProps({
  dept: Object,
  departments: Array,
  jobBoxes: Array,
});

// 해당 부서의 하위 부서 찾기
const children = computed(() =>
  props.departments.filter(d => d.parentCd === props.dept.deptCd)
);

// 해당 부서의 업무함 찾기
const deptJobBoxes = computed(() =>
  props.jobBoxes.filter(j => j.deptCd === props.dept.deptCd)
);
</script>

<style scoped>
span {
  font-weight: bold;
  cursor: pointer;
}
li {
  margin: 5px 0;
}
</style>


첫 번째 방식은 App.vue에서 트리의 루트를 미리 정리하는 방식
두 번째 방식은 TreeNode.vue가 알아서 트리를 만들어 나가는 방식
